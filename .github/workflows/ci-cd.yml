name: Frontend CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  IMAGE_NAME: pp4-frontend

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run tests
        run: npm test

  build-and-push:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ${{ secrets.EC2_PROJECT_PATH || '/home/ubuntu/devops-tpi-infra' }}
            echo "üöÄ Iniciando deployment del frontend..."

            # Descargar la nueva imagen
            docker-compose pull frontend

            # Parar el frontend actual para evitar conflictos
            docker-compose stop frontend

            # Remover el contenedor anterior
            docker-compose rm -f frontend

            # Recrear solo el servicio frontend
            docker-compose up -d frontend

            # Esperar un momento para que inicie
            sleep 5

            # Limpiar im√°genes no utilizadas
            docker image prune -f

            # Verificar que el servicio est√© corriendo
            echo "üîç Verificando estado del frontend..."
            docker-compose ps frontend

            # Mostrar logs si hay problemas
            echo "üìã √öltimos logs del frontend:"
            docker-compose logs --tail=20 frontend

            echo "‚úÖ Frontend desplegado exitosamente!"
